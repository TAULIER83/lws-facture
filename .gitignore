from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
import os
import time
import glob
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.microsoft import EdgeChromiumDriverManager

# Créer un dossier pour les fichiers PDF
dossier_pdf = os.path.join(os.getcwd(), "factures_pdf")

if not os.path.exists(dossier_pdf):
    os.makedirs(dossier_pdf)

# Configuration pour imprimer directement en PDF (sans impression automatique)
edge_options = Options()
prefs = {
    "printing.print_preview_sticky_settings.appState": '{"version":2,"isHeaderFooterEnabled":false,"marginsType":3,"scaling":"100","recentDestinations":[{"id":"Save as PDF","origin":"local","account":"","name":"Save as PDF"}]}',
    "savefile.default_directory": dossier_pdf,
}
edge_options.add_experimental_option("prefs", prefs)
edge_options.add_argument('--kiosk-printing')  # Impression automatique

# Lancer Edge WebDriver
service = Service(EdgeChromiumDriverManager().install())
driver = webdriver.Edge(service=service, options=edge_options)

# Fonction pour attendre que le fichier PDF ait une taille non nulle
def attendre_fichier_pdf(fichier, taille_minimale=5000, timeout=30):
    """
    Attendre que le fichier PDF ait une taille supérieure à 'taille_minimale'.
    """
    start_time = time.time()
    while time.time() - start_time < timeout:
        if os.path.exists(fichier) and os.path.getsize(fichier) > taille_minimale:
            return True
        time.sleep(1)
    return False

# Fonction pour gérer la redirection vers les pages d'erreur (reCAPTCHA ou autre)
def gerer_erreur_recaptcha(driver):
    try:
        # Vérifier si on est sur une des pages d'erreur (recaptcha ou heberg)
        WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//a[contains(@class, 'btn-success') and contains(@href, 'index.php')]"))
        )
        print("Page d'erreur détectée. Tentative de reconnexion...")
        
        # Cliquer sur le bouton "Connectez vous à nouveau"
        bouton_reconnexion = driver.find_element(By.XPATH, "//a[contains(@class, 'btn-success') and contains(@href, 'index.php')]")
        bouton_reconnexion.click()

        # Attendre quelques secondes avant de continuer
        time.sleep(5)

        # Retour à la page de connexion après avoir cliqué sur le bouton
        return True
    except Exception as e:
        print(f"Aucune redirection d'erreur détectée ou erreur lors de la gestion de la redirection : {e}")
        return False

# Aller sur la page de connexion de LWS
driver.get("https://panel.lws.fr/")
print("Ouverture de la page de connexion...")
time.sleep(5)  # Attendre 5 secondes après l'ouverture de la page de connexion

# Attendre que la page de connexion se charge
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Identifiant LWS-XXX ou mail']")))

# Remplir les champs de connexion
username = driver.find_element(By.XPATH, "//input[@placeholder='Identifiant LWS-XXX ou mail']")
password = driver.find_element(By.XPATH, "//input[@placeholder='Mot de passe']")
username.send_keys("LWS-00000")  # Remplacer par ton identifiant
password.send_keys("000006@")  # Remplacer par ton mot de passe

# Ajouter ici une attente si nécessaire pour résoudre le reCAPTCHA, sinon :
time.sleep(5)  # Attendre 5 secondes après avoir rempli les informations de connexion

# Vérifier si on est redirigé vers une page d'erreur connue
if "erreur_heberg_idpwd.php" in driver.current_url or "erreur_heberg.php" in driver.current_url:
    gerer_erreur_recaptcha(driver)

# Automatiquement se rendre sur la page des factures après connexion
driver.get("https://panel.lws.fr/idlws_factures.php")
print("Accès automatique à la page des factures...")
time.sleep(5)  # Attendre 5 secondes après l'accès à la page des factures

# Attendre que la page soit entièrement chargée
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//a[contains(@class,'btn-primary') and contains(@href, 'frfacturelws2.php')]")))

# Chercher les liens "Voir / Imprimer" et les numéros de factures associés
factures = driver.find_elements(By.XPATH, "//a[contains(@class,'btn-primary') and contains(@href, 'frfacturelws2.php')]")
numero_factures = driver.find_elements(By.XPATH, "//td[contains(text(),'FC-')]")  # Sélectionner les éléments contenant les numéros de factures

print(f"{len(factures)} factures trouvées.")
time.sleep(5)  # Attendre 5 secondes après l'affichage des factures trouvées

# Parcourir chaque lien de facture et traiter le fichier PDF
for index, facture in enumerate(factures):
    try:
        # Récupérer le numéro de la facture correspondant
        numero_facture = numero_factures[index].text.strip()
        print(f"Traitement de la facture {numero_facture}...")

        # Cliquer sur la facture pour ouvrir la modale
        facture.click()

        # Attendre que la modale soit complètement chargée
        WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.ID, "printThis"))
        )

        # **Défilement vers le bas de la modale pour atteindre le bouton Imprimer**
        print("Défilement vers le bas de la modale pour atteindre le bouton Imprimer...")
        driver.execute_script("""
            let modal_body = document.querySelector('.modal-body');
            modal_body.scrollTop = modal_body.scrollHeight;
        """)

        # Attendre que le bouton "Imprimer" soit visible et cliquable
        bouton_imprimer = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "fc_print"))  # Utilisation de l'ID #fc_print
        )

        # Liste des fichiers PDF avant impression
        pdf_files_before = set(glob.glob(os.path.join(dossier_pdf, "*.pdf")))

        # Cliquer sur le bouton "Imprimer"
        print(f"Impression de la facture {numero_facture}...")
        bouton_imprimer.click()

        # Attendre que l'impression se termine et que le fichier soit créé
        time.sleep(5)  # Attendre 10 secondes pour la création du fichier PDF

        # Liste des fichiers PDF après impression
        pdf_files_after = set(glob.glob(os.path.join(dossier_pdf, "*.pdf")))
        new_pdf_file = list(pdf_files_after - pdf_files_before)  # Identifier le nouveau fichier

        if new_pdf_file:
            old_file_path = new_pdf_file[0]

            # Attendre que le fichier PDF soit complètement généré et atteigne une taille minimale
            if attendre_fichier_pdf(old_file_path, taille_minimale=5000):  # Taille minimale de 5 Ko
                new_file_path = os.path.join(dossier_pdf, f"Facture_{numero_facture}.pdf")
                print(f"Renommage du fichier temporaire en : {new_file_path}")
                os.rename(old_file_path, new_file_path)
                print(f"Fichier renommé en {new_file_path}")
            else:
                print(f"Erreur : Le fichier PDF pour la facture {numero_facture} ne semble pas avoir été correctement généré.")
        else:
            print(f"Erreur : Aucun fichier PDF n'a été généré pour la facture {numero_facture}.")

        time.sleep(2)  # Attendre 5 secondes après la génération du PDF

        # **Fermeture de la fenêtre modale**
        close_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//a[@class='close' and @data-dismiss='modal']"))
        )
        close_button.click()  # Fermer la modale en cliquant sur "X"
        print(f"Fenêtre modale fermée pour la facture {numero_facture}.")
        time.sleep(2)  # Attendre 5 secondes après la fermeture de la fenêtre modale

    except Exception as e:
        print(f"Erreur lors du traitement de la facture {numero_facture}: {e}")
        time.sleep(2)  # Attendre 5 secondes après une erreur

# Fermeture du navigateur
driver.quit()
